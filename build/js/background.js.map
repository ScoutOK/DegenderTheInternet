{"version":3,"sources":["webpack:///./background/event.js"],"names":["pageData","pronouns","nouns","adjectives","tabProm","Promise","resolve","reject","chrome","tabs","query","currentWindow","active","Array","isArray","runtime","onMessage","addListener","request","sender","sendResponse","message","tabIdx","analyticsURL","extension","getURL","then","index","create","url","catch","console","error"],"mappings":";;;;;;AAAA;;AAEA,KAAIA,WAAW;AACbC,aAAU,EADG;AAEbC,UAAO,EAFM;AAGbC,eAAY;AAHC,EAAf;;AAMA;AACA,KAAMC,UAAU,SAAVA,OAAU,GAAM;AACpB,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,YAAOC,IAAP,CAAYC,KAAZ,CAAkB,EAACC,eAAe,IAAhB,EAAsBC,QAAQ,IAA9B,EAAlB,EAAuD,UAAUH,IAAV,EAAe;AACpE,WAAII,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvBH,iBAAQG,IAAR;AACD,QAFD,MAEO;AACLF,gBAAO,cAAP;AACD;AACF,MAND;AAOD,IARM,CAAP;AASD,EAVD;;AAaAC,QAAOO,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CACE,UAASC,OAAT,EAAkBC,MAAlB,EAA0BC,YAA1B,EAAwC;AACtC,WAAQF,QAAQG,OAAhB;AACA,UAAK,SAAL;AACE;AACArB,kBAAWkB,QAAQlB,QAAnB;AACA,WAAIsB,eAAJ;AACA;AACA,WAAMC,eAAef,OAAOgB,SAAP,CAAiBC,MAAjB,CAAwB,gBAAxB,CAArB;AACA;AACArB,iBACGsB,IADH,CACQ,UAACjB,IAAD,EAAQ;AACZa,kBAASb,KAAK,CAAL,EAAQkB,KAAR,GAAgB,CAAzB;AACAnB,gBAAOC,IAAP,CAAYmB,MAAZ,CAAmB;AACjBC,gBAAKN,YADY;AAEjBI,kBAAOL;AAFU,UAAnB;AAID,QAPH,EAQGQ,KARH,CAQSC,QAAQC,KARjB;;AAWF,UAAK,WAAL;AACEZ,oBAAapB,QAAb;AACF;AACEoB,oBAAa,EAACY,OAAO,SAAR,EAAb;AAtBF;AAyBD,EA3BH,E","file":"./build/js/background.js","sourcesContent":["// const Promise = require('bluebird');\n\nlet pageData = {\n  pronouns: {},\n  nouns: {},\n  adjectives: {}\n}\n\n// make the tab query into a promise to chain off of\nconst tabProm = () => {\n  return new Promise((resolve, reject) => {\n    chrome.tabs.query({currentWindow: true, active: true}, function (tabs){\n      if (Array.isArray(tabs)) {\n        resolve(tabs);\n      } else {\n        reject('not in a tab')\n      }\n    });\n  })\n}\n\n\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    switch (request.message) {\n    case 'analyze':\n      //save the message data\n      pageData = request.pageData;\n      let tabIdx\n      //find the url for the analytics page\n      const analyticsURL = chrome.extension.getURL('analytics.html');\n      //use query data to create a new tab next to the current one\n      tabProm()\n        .then((tabs)=>{\n          tabIdx = tabs[0].index + 1;\n          chrome.tabs.create({\n            url: analyticsURL,\n            index: tabIdx\n          })\n        })\n        .catch(console.error);\n\n      \n    case 'pageReady':\n      sendResponse(pageData)\n    default:\n      sendResponse({error: '???????'})\n  }\n      \n  });\n\n\n// WEBPACK FOOTER //\n// ./background/event.js"],"sourceRoot":""}