{"version":3,"sources":["webpack:///./background/event.js"],"names":["pageData","pronouns","nouns","adjectives","chrome","runtime","onMessage","addListener","request","sender","sendResponse","console","log","tab","url","message","tabIdx","tabProm","Promise","resolve","reject","tabs","query","currentWindow","active","Array","isArray","then","index","create","analyticsURL","catch","error","farewell","extension","getURL"],"mappings":";;;;;;AAAA;;AAEA,KAAIA,WAAW;AACbC,aAAU,EADG;AAEbC,UAAO,EAFM;AAGbC,eAAY;AAHC,EAAf;;AAMA;;AAEAC,QAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CACE,UAASC,OAAT,EAAkBC,MAAlB,EAA0BC,YAA1B,EAAwC;AACtCC,WAAQC,GAAR,CAAYH,OAAOI,GAAP,GACA,2BAA2BJ,OAAOI,GAAP,CAAWC,GADtC,GAEA,oBAFZ;AAGA,OAAIN,QAAQO,OAAR,IAAmB,SAAvB,EAAiC;AAC/B,SAAIC,eAAJ;AACA,SAAMC,UAAU,SAAVA,OAAU,GAAM;AACpB,cAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtChB,gBAAOiB,IAAP,CAAYC,KAAZ,CAAkB,EAACC,eAAe,IAAhB,EAAsBC,QAAQ,IAA9B,EAAlB,EAAuD,UAAUH,IAAV,EAAe;AACpE,eAAII,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvBF,qBAAQE,IAAR;AACD,YAFD,MAEO;AACLD,oBAAO,cAAP;AACD;AACF,UAND;AAOD,QARM,CAAP;AASD,MAVD;;AAYAH,eACGU,IADH,CACQ,UAACN,IAAD,EAAQ;AACZL,gBAASK,KAAK,CAAL,EAAQO,KAAR,GAAgB,CAAzB;AACAxB,cAAOiB,IAAP,CAAYQ,MAAZ,CAAmB;AACjBf,cAAKgB,YADY;AAEjBF,gBAAOZ;AAFU,QAAnB,EAGG,YAAU;AACXL,iBAAQC,GAAR,CAAY,cAAZ;AACD,QALD;AAMD,MATH,EAUGmB,KAVH,CAUSpB,QAAQqB,KAVjB;AAWA;AACA;AACA;AACA;AACA;AACAtB,kBAAa,EAACuB,UAAU,qBAAX,EAAb;AACA,SAAMH,eAAe1B,OAAO8B,SAAP,CAAiBC,MAAjB,CAAwB,gBAAxB,CAArB;AAED;AAGF,EAzCH,E","file":"./build/js/background.js","sourcesContent":["// const Promise = require('bluebird');\n\nlet pageData = {\n  pronouns: {},\n  nouns: {},\n  adjectives: {}\n}\n\n// const syncTabQuery = Promise.promisify(chrome.tabs.query())\n\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.message == \"analyze\"){\n      let tabIdx\n      const tabProm = () => {\n        return new Promise((resolve, reject) => {\n          chrome.tabs.query({currentWindow: true, active: true}, function (tabs){\n            if (Array.isArray(tabs)) {\n              resolve(tabs);\n            } else {\n              reject('not in a tab')\n            }\n          });\n        })\n      }\n\n      tabProm()\n        .then((tabs)=>{\n          tabIdx = tabs[0].index + 1;\n          chrome.tabs.create({\n            url: analyticsURL,\n            index: tabIdx\n          }, function(){\n            console.log('well i tried');\n          })\n        })\n        .catch(console.error);\n      // chrome.tabs.query({currentWindow: true, active: true}, function (tabs){\n      //   console.log('current tab index', tabs[0].index)\n      //   tabIdx = tabs[0].index + 1;\n      // });\n      //console.log('the analysis tab id', tabIdx);\n      sendResponse({farewell: \"we made it this far\"});\n      const analyticsURL = chrome.extension.getURL('analytics.html');\n      \n    }\n\n      \n  });\n\n\n// WEBPACK FOOTER //\n// ./background/event.js"],"sourceRoot":""}