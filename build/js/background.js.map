{"version":3,"sources":["webpack:///./background/event.js"],"names":["pageData","pronouns","nouns","adjectives","tabProm","Promise","resolve","reject","chrome","tabs","query","currentWindow","active","Array","isArray","runtime","onMessage","addListener","request","sender","sendResponse","console","log","tab","url","message","tabIdx","then","index","create","analyticsURL","catch","error","data","farewell","extension","getURL"],"mappings":";;;;;;AAAA;;AAEA,KAAIA,WAAW;AACbC,aAAU,EADG;AAEbC,UAAO,EAFM;AAGbC,eAAY;AAHC,EAAf;;AAMA;AACA,KAAMC,UAAU,SAAVA,OAAU,GAAM;AACpB,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,YAAOC,IAAP,CAAYC,KAAZ,CAAkB,EAACC,eAAe,IAAhB,EAAsBC,QAAQ,IAA9B,EAAlB,EAAuD,UAAUH,IAAV,EAAe;AACpE,WAAII,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvBH,iBAAQG,IAAR;AACD,QAFD,MAEO;AACLF,gBAAO,cAAP;AACD;AACF,MAND;AAOD,IARM,CAAP;AASD,EAVD;;AAYAC,QAAOO,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CACE,UAASC,OAAT,EAAkBC,MAAlB,EAA0BC,YAA1B,EAAwC;AACtCC,WAAQC,GAAR,CAAYH,OAAOI,GAAP,GACA,2BAA2BJ,OAAOI,GAAP,CAAWC,GADtC,GAEA,oBAFZ;AAGA,OAAIN,QAAQO,OAAR,IAAmB,SAAvB,EAAiC;AAC/B,SAAIC,eAAJ;;AAEAtB,eACGuB,IADH,CACQ,UAAClB,IAAD,EAAQ;AACZiB,gBAASjB,KAAK,CAAL,EAAQmB,KAAR,GAAgB,CAAzB;AACApB,cAAOC,IAAP,CAAYoB,MAAZ,CAAmB;AACjBL,cAAKM,YADY;AAEjBF,gBAAOF;AAFU,QAAnB,EAGG,YAAU;AACXL,iBAAQC,GAAR,CAAY,cAAZ;AACD,QALD;AAMD,MATH,EAUGS,KAVH,CAUSV,QAAQW,KAVjB;;AAYAX,aAAQC,GAAR,CAAYJ,QAAQe,IAApB;;AAEAb,kBAAa,EAACc,UAAU,qBAAX,EAAb;AACA,SAAMJ,eAAetB,OAAO2B,SAAP,CAAiBC,MAAjB,CAAwB,gBAAxB,CAArB;AAED;AAGF,EA5BH,E","file":"./build/js/background.js","sourcesContent":["// const Promise = require('bluebird');\n\nlet pageData = {\n  pronouns: {},\n  nouns: {},\n  adjectives: {}\n}\n\n// const syncTabQuery = Promise.promisify(chrome.tabs.query())\nconst tabProm = () => {\n  return new Promise((resolve, reject) => {\n    chrome.tabs.query({currentWindow: true, active: true}, function (tabs){\n      if (Array.isArray(tabs)) {\n        resolve(tabs);\n      } else {\n        reject('not in a tab')\n      }\n    });\n  })\n}\n\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    console.log(sender.tab ?\n                \"from a content script:\" + sender.tab.url :\n                \"from the extension\");\n    if (request.message == \"analyze\"){\n      let tabIdx\n    \n      tabProm()\n        .then((tabs)=>{\n          tabIdx = tabs[0].index + 1;\n          chrome.tabs.create({\n            url: analyticsURL,\n            index: tabIdx\n          }, function(){\n            console.log('well i tried');\n          })\n        })\n        .catch(console.error);\n\n      console.log(request.data)\n\n      sendResponse({farewell: \"we made it this far\"});\n      const analyticsURL = chrome.extension.getURL('analytics.html');\n      \n    }\n\n      \n  });\n\n\n// WEBPACK FOOTER //\n// ./background/event.js"],"sourceRoot":""}